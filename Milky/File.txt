// Fragment shader with pixelated upscaling and corner vignette effect
fragment float4 fragment_main(VertexOut in [[stage_in]],
                              texture2d<float, access::sample> inputTexture [[texture(0)]]) {
    // Use a sampler with nearest-neighbor filtering
    constexpr sampler texSampler(mag_filter::nearest, min_filter::nearest);

    // Sample the texture using nearest-neighbor filtering
    float4 color = inputTexture.sample(texSampler, in.texCoord);

    // Optional: Apply gamma correction to adjust brightness
    float gamma = 1.5;
    color.rgb = pow(color.rgb, float3(1.0 / gamma));

    // Add grain effect
    float grainAmount = 0.03;
    float2 textureSize = float2(inputTexture.get_width(), inputTexture.get_height());
    float grain = random(in.texCoord * textureSize) * grainAmount;
    color.rgb += float3(grain);

    // Corner vignette effect
    float2 uv = in.texCoord;

    // Calculate distances from the four corners
    float distTL = distance(uv, float2(0.0, 1.0)); // Top-left corner
    float distTR = distance(uv, float2(1.0, 1.0)); // Top-right corner
    float distBL = distance(uv, float2(0.0, 0.0)); // Bottom-left corner
    float distBR = distance(uv, float2(1.0, 0.0)); // Bottom-right corner

    // Find the minimum distance to any corner
    float cornerDist = min(min(distTL, distTR), min(distBL, distBR));

    // Apply smoothstep to create a smooth vignette effect in the corners
    float vignetteStart = 0.0;  // Distance where vignette starts
    float vignetteEnd = 0.5;    // Distance where vignette ends
    float vignette = smoothstep(vignetteStart, vignetteEnd, cornerDist);

    // Adjust the vignette intensity
    float vignetteIntensity = 0.5; // Adjust intensity between 0.0 and 1.0
    color.rgb *= (1.0 - vignette * vignetteIntensity);

    // Clamp the final color values
    color.rgb = clamp(color.rgb, 0.0, 1.0);

    return color;
}